#version 430 core

#define LCG_M 2147483647 //2^31-1
#define LCG_A 48271
#define LCG_C 0

#define PI 3.1415926535

#define OCTREE_SIZE 4681 //16*16*16+8*8*8+4*4*4+2*2*2+1
#define MAX_TRACK_DEPTH 4
#define DIRECT_LIGHT_SAMPLE_RANGE 1
#define DIRECT_LIGHT_SAMPLE_NUM 1 //DIRECT_LIGHT_SAMPLE_RANGE^3
#define DIRECT_LIGHT_SAMPLE_FAILURE 65536

struct block {
    uint block_id;
    uint status;
};

struct block_info {
    float roughness;
    float k;
    float brightness;
    float _pad1;
    vec3 diffuse_color;
    vec3 reflect_color;
};

struct section {
    uint start_pos_x;
    uint start_pos_y;
    uint start_pos_z;
    block blocks[16][16][16];
    uint light_source_num;
    uvec3 light_pos[4096];
};

struct octree_node {
    //unsigned int width: 3; //2^width
    //unsigned int empty: 1;
    //unsigned int index: 28;
    uint metadata;
};

struct octree {
    uint start_pos_x; //min coord
    uint start_pos_y;
    uint start_pos_z;
    octree_node nodes[OCTREE_SIZE];
};

struct section_group_map {
    uint section_map[16][16][16];
};

struct camera {
    vec3 pos;
    vec3 front;
    vec3 up;
    vec3 right;
    vec3 coord_up;
    uvec2 width_height;
    float aspect_ratio;
    float fov;
    uint seed;
    uint fixed_frame_count;
};

struct ray {
    vec3 pos;
    vec3 dir;
};

struct ray_hit_result {
    bool hit;
    bool inbound;
    float dist;
    uint plain_index;
    vec3 plain_normal;
    vec3 hit_pos;
    uvec3 section_pos;
    uvec3 block_pos;
    uvec3 section_index;
    uvec3 block_index;
    uint block_id;
    uint block_status;
};

struct direct_lighting_result {
    bool success;
    ray sample_ray;
    vec3 sample_point;
    vec3 result_color;
};

layout(local_size_x = 8, local_size_y = 8) in;

layout(std430, binding = 0) buffer camera_buffer {
    camera now_camera;
};

layout(std430, binding = 1) buffer section_group_buffer {
    section section_group[];
};

layout(std430, binding = 2) buffer section_group_map_buffer {
    section_group_map group_map_data;
};

layout(std430, binding = 3) buffer block_info_list_buffer {
    block_info block_info_list[];
};

layout(std430, binding = 4) buffer center_octree_buffer {
    octree center_octree;
};

layout(std430, binding = 5) buffer section_octree_buffer {
    octree section_octree[];
};

layout(rgba32f, binding = 6) uniform image2D output_image;

uint lcg_seed;

uvec3 pcg3d(uvec3 v) {
    v = v * 1664525 + 1013904223;

    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;

    v ^= v>>16;

    v.x += v.y*v.z;
    v.y += v.z*v.x;
    v.z += v.x*v.y;

    return v;
}

uint lcg(uint seed) {
    return (seed * LCG_A) & 0x7FFFFFFF;
}

float rand_01() {
    lcg_seed = lcg(lcg_seed);
    return float(lcg_seed) / float(LCG_M);
}

float rand_11() {
    return rand_01() * 2 - 1;
}

vec3 sample_sphere() {
    float phi = 2*PI*rand_01();
    float theta = acos(rand_11());
    return vec3(sin(theta)*cos(phi), sin(theta)*sin(phi), cos(theta));
}

vec3 sample_half_sphere(vec3 normal) {
    vec3 dir = sample_sphere();
    if (dot(dir, normal) < 0) {
        dir = -dir;
    }
    return dir;
}

/*
  6  7
4  5
  2  3
0  1

z^ ^y
 |/_>x
*/

vec2 get_block_uv(ray_hit_result result) {
    vec3 start_pos;
    vec3 right;
    vec3 up;
    vec2 uv_coord;
    vec3 in_block_pos;
    switch (result.plain_index) {
        case 0: //-x
            start_pos = vec3(result.block_pos.x, result.block_pos.y+1, result.block_pos.z);
            right = vec3(0, -1, 0);
            up = vec3(0, 0, 1);
        case 1: //+x
            start_pos = vec3(result.block_pos.x+1, result.block_pos.y, result.block_pos.z);
            right = vec3(0, 1, 0);
            up = vec3(0, 0, 1);
        case 2: //-y
            start_pos = vec3(result.block_pos.x, result.block_pos.y, result.block_pos.z);
            right = vec3(1, 0, 0);
            up = vec3(0, 0, 1);
        case 3: //+y
            start_pos = vec3(result.block_pos.x+1, result.block_pos.y+1, result.block_pos.z);
            right = vec3(-1, 0, 0);
            up = vec3(0, 0, 1);
        case 4: //-z
            start_pos = vec3(result.block_pos.x, result.block_pos.y+1, result.block_pos.z);
            right = vec3(1, 0, 0);
            up = vec3(0, -1, 0);
        case 5: //+z
            start_pos = vec3(result.block_pos.x, result.block_pos.y, result.block_pos.z+1);
            right = vec3(1, 0, 0);
            up = vec3(0, 1, 0);
    }
    in_block_pos = result.block_pos - start_pos;
    uv_coord.x = in_block_pos.x * right.x + in_block_pos.y * right.y + in_block_pos.z * right.z; //u
    uv_coord.y = in_block_pos.x * up.x + in_block_pos.y * up.y + in_block_pos.z * up.z; //v
    return uv_coord;
}

uint get_metadata_width(uint metadata) {
    return (metadata >> 29) & 0x07;
}

bool get_metadata_empty(uint metadata) {
    return ((metadata >> 28) & 0x01) == 1 ? true : false;
}

uint get_metadata_index(uint metadata) {
    return metadata & 0x0FFFFFFF;
}

uint get_octree_index(uvec3 local_coord, uint width) {
    uint index = 0;
    for (uint i = width; i < 4; ++i) {
        index += (1<<(3-i)) * (1<<(3-i)) * (1<<(3-i));
    }
    return index + (local_coord.x>>width) + (local_coord.y>>width)*(1<<(4-width)) + (local_coord.z>>width)*(1<<(8-(width<<1)));
}

ray generate_ray() {
    ray temp_ray;
    float half_plane_width = tan(radians(now_camera.fov));
    float half_plane_height = half_plane_width / now_camera.aspect_ratio;
    float rand_x_bias = 0.5 * rand_11();
    float rand_y_bias = 0.5 * rand_11();
    vec3 ray_right = half_plane_width * (((float(gl_GlobalInvocationID.x) + rand_x_bias) / float(now_camera.width_height.x-1)) * 2 - 1) * now_camera.right;
    vec3 ray_up = half_plane_height * (((float(gl_GlobalInvocationID.y) + rand_y_bias) / float(now_camera.width_height.y-1)) * 2 - 1) * now_camera.coord_up;
    temp_ray.dir = now_camera.front + ray_right + ray_up;
    temp_ray.pos = now_camera.pos + temp_ray.dir * 0.05f;
    temp_ray.dir = normalize(temp_ray.dir);
    return temp_ray;
}

ray_hit_result ray_hit_node(ray now_ray, vec3 min_coord, uint width) {
    vec3 max_coord = min_coord + (1<<width);
    vec3 point_on_plane;
    float t;
    ray_hit_result result;
    result.hit = true;
    result.inbound = false;

    if (min_coord.x < now_ray.pos.x && now_ray.pos.x < max_coord.x && min_coord.y < now_ray.pos.y && now_ray.pos.y < max_coord.y && min_coord.z < now_ray.pos.z && now_ray.pos.z < max_coord.z) {
        result.inbound = true;
    }

    if (now_ray.dir.x != 0.0f) {
        if (now_ray.dir.x > 0.0f != result.inbound) {
            t = (min_coord.x - now_ray.pos.x) / now_ray.dir.x;
            result.plain_normal = vec3(-1, 0, 0); //-x
            result.plain_index = 0;
        } else {
            t = (max_coord.x - now_ray.pos.x) / now_ray.dir.x;
            result.plain_normal = vec3(1, 0, 0); //+x
            result.plain_index = 1;
        }
        if (t > 0.0f) {
            point_on_plane = now_ray.pos + t * now_ray.dir;
            if (min_coord.y < point_on_plane.y && max_coord.y > point_on_plane.y && min_coord.z < point_on_plane.z && max_coord.z > point_on_plane.z) {
                result.dist = t;
                result.hit_pos = point_on_plane + result.plain_normal * 0.01f;
                return result;
            }
        }
    }

    if (now_ray.dir.y != 0.0f) {
        if (now_ray.dir.y > 0.0f != result.inbound) {
            t = (min_coord.y - now_ray.pos.y) / now_ray.dir.y;
            result.plain_normal = vec3(0, -1, 0); //-y
            result.plain_index = 2;
        } else {
            t = (max_coord.y - now_ray.pos.y) / now_ray.dir.y;
            result.plain_normal = vec3(0, 1, 0); //+y
            result.plain_index = 3;
        }
        if (t > 0.0f) {
            point_on_plane = now_ray.pos + t * now_ray.dir;
            if (min_coord.z < point_on_plane.z && max_coord.z > point_on_plane.z && min_coord.x < point_on_plane.x && max_coord.x > point_on_plane.x) {
                result.dist = t;
                result.hit_pos = point_on_plane + result.plain_normal * 0.01f;
                return result;
            }
        }
    }

    if (now_ray.dir.z != 0.0f) {
        if (now_ray.dir.z > 0.0f != result.inbound) {
            t = (min_coord.z - now_ray.pos.z) / now_ray.dir.z;
            result.plain_normal = vec3(0, 0, -1); //-z
            result.plain_index = 4;
        } else {
            t = (max_coord.z - now_ray.pos.z) / now_ray.dir.z;
            result.plain_normal = vec3(0, 0, 1); //+z
            result.plain_index = 5;
        }
        if (t > 0.0f) {
            point_on_plane = now_ray.pos + t * now_ray.dir;
            if (min_coord.x < point_on_plane.x && max_coord.x > point_on_plane.x && min_coord.y < point_on_plane.y && max_coord.y > point_on_plane.y) {
                result.dist = t;
                result.hit_pos = point_on_plane + result.plain_normal * 0.01f;
                return result;
            }
        }
    }

    result.hit = false;
    return result;
}

/*
  6  7
4  5
  2  3
0  1

z^ ^y
 |/_>x
*/

uint [8]get_dfs_order(ray now_ray, vec3 min_coord, uint width) {
    vec3 max_coord = min_coord + (1<<width);
    vec3 mid_coord = (min_coord + max_coord)/2;

    //corner
    if ((now_ray.pos.x <= min_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z <= min_coord.z) || (now_ray.pos.x <= mid_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= mid_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= mid_coord.z && now_ray.pos.z >= min_coord.z)) { //---
        return uint[8](0, 1, 2, 4, 3, 6, 5, 7);
    }
    if ((now_ray.pos.x >= max_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z <= min_coord.z) || (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= mid_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= mid_coord.z && now_ray.pos.z >= min_coord.z)) { //+--
        return uint[8](1, 0, 3, 5, 4, 7, 2, 6);
    }
    if ((now_ray.pos.x <= min_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z <= min_coord.z) || (now_ray.pos.x <= mid_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= mid_coord.z && now_ray.pos.z >= min_coord.z)) { //-+-
        return uint[8](2, 3, 0, 6, 7, 4, 1, 5);
    }
    if ((now_ray.pos.x >= max_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z <= min_coord.z) || (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= mid_coord.z && now_ray.pos.z >= min_coord.z)) { //++-
        return uint[8](3, 2, 1, 7, 6, 5, 0, 4);
    }
    if ((now_ray.pos.x <= min_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z >= max_coord.z) || (now_ray.pos.x <= mid_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= mid_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= mid_coord.z)) { //--+
        return uint[8](4, 5, 6, 0, 1, 2, 7, 3);
    }
    if ((now_ray.pos.x >= max_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z >= max_coord.z) || (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= mid_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= mid_coord.z)) { //+-+
        return uint[8](5, 4, 7, 1, 0, 3, 6, 2);
    }
    if ((now_ray.pos.x <= min_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z >= max_coord.z) || (now_ray.pos.x <= mid_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= mid_coord.z)) { //-++
        return uint[8](6, 4, 7, 2, 0, 3, 5, 1);
    }
    if ((now_ray.pos.x >= max_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z >= max_coord.z) || (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= mid_coord.z)) { //+++
        return uint[8](7, 6, 5, 3, 1, 2, 4, 0);
    }

    //face
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z >= max_coord.z) { //xOy +z
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.y <= mid_coord.y) { //--
            return uint[8](4, 5, 6, 7, 0, 1, 2, 3);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= mid_coord.y) { //+-
            return uint[8](5, 4, 7, 6, 1, 0, 3, 2);
        }
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.y >= mid_coord.y) { //-+
            return uint[8](6, 4, 7, 5, 2, 0, 3, 1);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.y >= mid_coord.y) { //++
            return uint[8](7, 6, 5, 4, 3, 2, 1, 0);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= min_coord.z) { //xOy -z
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.y <= mid_coord.y) { //--
            return uint[8](0, 1, 2, 3, 4, 5, 6, 7);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.y <= mid_coord.y) { //+-
            return uint[8](1, 0, 3, 2, 5, 4, 7, 6);
        }
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.y >= mid_coord.y) { //-+
            return uint[8](2, 0, 3, 1, 6, 4, 7, 5);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.y >= mid_coord.y) { //++
            return uint[8](3, 2, 1, 0, 7, 6, 5, 4);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.y >= max_coord.y) { //xOz +y
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.z <= mid_coord.z) { //--
            return uint[8](2, 3, 6, 7, 0, 1, 4, 5);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.z <= mid_coord.z) { //+-
            return uint[8](3, 2, 7, 6, 1, 0, 5, 4);
        }
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.z >= mid_coord.z) { //-+
            return uint[8](6, 2, 7, 3, 4, 0, 5, 1);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.z >= mid_coord.z) { //++
            return uint[8](7, 6, 3, 2, 5, 4, 1, 0);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.y <= min_coord.y) { //xOz -y
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.z <= mid_coord.z) { //--
            return uint[8](0, 1, 4, 5, 2, 3, 6, 7);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.z <= mid_coord.z) { //+-
            return uint[8](1, 0, 5, 4, 3, 2, 7, 6);
        }
        if (now_ray.pos.x <= mid_coord.x && now_ray.pos.z >= mid_coord.z) { //-+
            return uint[8](4, 0, 5, 1, 6, 2, 7, 3);
        }
        if (now_ray.pos.x >= mid_coord.x && now_ray.pos.z >= mid_coord.z) { //++
            return uint[8](5, 4, 1, 0, 7, 6, 3, 2);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x >= max_coord.x) { //yOz +x
        if (now_ray.pos.y <= mid_coord.y && now_ray.pos.z <= mid_coord.z) { //--
            return uint[8](1, 3, 5, 7, 0, 2, 4, 6);
        }
        if (now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= mid_coord.z) { //+-
            return uint[8](3, 1, 7, 5, 2, 0, 6, 4);
        }
        if (now_ray.pos.y <= mid_coord.y && now_ray.pos.z >= mid_coord.z) { //-+
            return uint[8](5, 1, 7, 3, 4, 0, 6, 2);
        }
        if (now_ray.pos.y >= mid_coord.y && now_ray.pos.z >= mid_coord.z) { //++
            return uint[8](7, 5, 3, 1, 6, 4, 2, 0);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x <= min_coord.x) { //yOz -x
        if (now_ray.pos.y <= mid_coord.y && now_ray.pos.z <= mid_coord.z) { //--
            return uint[8](0, 2, 4, 6, 1, 3, 5, 7);
        }
        if (now_ray.pos.y >= mid_coord.y && now_ray.pos.z <= mid_coord.z) { //+-
            return uint[8](2, 0, 6, 4, 3, 1, 7, 5);
        }
        if (now_ray.pos.y <= mid_coord.y && now_ray.pos.z >= mid_coord.z) { //-+
            return uint[8](4, 0, 6, 2, 5, 1, 7, 3);
        }
        if (now_ray.pos.y >= mid_coord.y && now_ray.pos.z >= mid_coord.z) { //++
            return uint[8](6, 4, 2, 0, 7, 5, 3, 1);
        }
    }

    //edge
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z <= min_coord.z) { //0--
        if (now_ray.pos.x <= mid_coord.x) { //-
            return uint[8](0, 1, 4, 5, 2, 3, 6, 7);
        } else { //+
            return uint[8](1, 0, 5, 4, 3, 2, 7, 6);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z <= min_coord.z) { //0+-
        if (now_ray.pos.x <= mid_coord.x) { //-
            return uint[8](2, 3, 0, 1, 6, 7, 4, 5);
        } else { //+
            return uint[8](3, 2, 1, 0, 7, 6, 5, 4);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y <= min_coord.y && now_ray.pos.z >= max_coord.z) { //0-+
        if (now_ray.pos.x <= mid_coord.x) { //-
            return uint[8](4, 5, 0, 1, 6, 7, 2, 3);
        } else { //+
            return uint[8](5, 4, 1, 0, 7, 6, 3, 2);
        }
    }
    if (now_ray.pos.x <= max_coord.x && now_ray.pos.x >= min_coord.x && now_ray.pos.y >= max_coord.y && now_ray.pos.z >= max_coord.z) { //0++
        if (now_ray.pos.x <= mid_coord.x) { //-
            return uint[8](6, 7, 4, 5, 2, 3, 0, 1);
        } else { //+
            return uint[8](7, 6, 5, 4, 3, 2, 1, 0);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.x <= min_coord.x && now_ray.pos.z <= min_coord.z) { //-0-
        if (now_ray.pos.y <= mid_coord.y) { //-
            return uint[8](0, 2, 1, 3, 4, 6, 5, 7);
        } else { //+
            return uint[8](2, 0, 3, 1, 6, 4, 7, 5);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.x >= max_coord.x && now_ray.pos.z <= min_coord.z) { //+0-
        if (now_ray.pos.y <= mid_coord.y) { //-
            return uint[8](1, 3, 5, 7, 0, 2, 4, 6);
        } else { //+
            return uint[8](3, 1, 7, 5, 2, 0, 6, 4);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.x <= min_coord.x && now_ray.pos.z >= max_coord.z) { //-0+
        if (now_ray.pos.y <= mid_coord.y) { //-
            return uint[8](4, 6, 0, 2, 5, 7, 1, 3);
        } else { //+
            return uint[8](6, 4, 2, 0, 7, 5, 3, 1);
        }
    }
    if (now_ray.pos.y <= max_coord.y && now_ray.pos.y >= min_coord.y && now_ray.pos.x >= max_coord.x && now_ray.pos.z >= max_coord.z) { //+0+
        if (now_ray.pos.y <= mid_coord.y) { //-
            return uint[8](5, 7, 1, 3, 4, 6, 0, 2);
        } else { //+
            return uint[8](7, 5, 3, 1, 6, 4, 2, 0);
        }
    }
    if (now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x <= min_coord.x && now_ray.pos.y <= min_coord.y) { //--0
        if (now_ray.pos.z <= mid_coord.z) { //-
            return uint[8](0, 4, 2, 6, 1, 5, 3, 7);
        } else { //+
            return uint[8](4, 0, 6, 2, 5, 1, 7, 3);
        }
    }
    if (now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x >= max_coord.x && now_ray.pos.y <= min_coord.y) { //+-0
        if (now_ray.pos.z <= mid_coord.z) { //-
            return uint[8](1, 5, 3, 7, 0, 4, 2, 6);
        } else { //+
            return uint[8](5, 1, 7, 3, 4, 0, 6, 2);
        }
    }
    if (now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x <= min_coord.x && now_ray.pos.y >= max_coord.y) { //-+0
        if (now_ray.pos.z <= mid_coord.z) { //-
            return uint[8](2, 6, 0, 4, 3, 7, 1, 5);
        } else { //+
            return uint[8](6, 2, 4, 0, 7, 3, 5, 1);
        }
    }
    if (now_ray.pos.z <= max_coord.z && now_ray.pos.z >= min_coord.z && now_ray.pos.x >= max_coord.x && now_ray.pos.y >= max_coord.y) { //++0
        if (now_ray.pos.z <= mid_coord.z) { //-
            return uint[8](3, 7, 1, 5, 2, 6, 0, 4);
        } else { //+
            return uint[8](7, 3, 5, 1, 6, 2, 4, 0);
        }
    }
}

uint get_child_node_index(uvec3 coord, uint width, uint index) {
    switch (index) {
        case 0:
            return get_octree_index(coord, width - 1);
        case 1:
            return get_octree_index(uvec3(coord.x + (1<<(width - 1)), coord.y, coord.z), width - 1);
        case 2:
            return get_octree_index(uvec3(coord.x, coord.y + (1<<(width - 1)), coord.z), width - 1);
        case 3:
            return get_octree_index(uvec3(coord.x + (1<<(width - 1)), coord.y + (1<<(width - 1)), coord.z), width - 1);
        case 4:
            return get_octree_index(uvec3(coord.x, coord.y, coord.z + (1<<(width - 1))), width - 1);
        case 5:
            return get_octree_index(uvec3(coord.x + (1<<(width - 1)), coord.y, coord.z + (1<<(width - 1))), width - 1);
        case 6:
            return get_octree_index(uvec3(coord.x, coord.y + (1<<(width - 1)), coord.z + (1<<(width - 1))), width - 1);
        case 7:
            return get_octree_index(uvec3(coord.x + (1<<(width - 1)), coord.y + (1<<(width - 1)), coord.z + (1<<(width - 1))), width - 1);
    }
}

uvec3 get_child_node_coord(uvec3 coord, uint width, uint index) {
    switch (index) {
        case 0:
            return coord;
        case 1:
            return uvec3(coord.x + (1<<(width - 1)), coord.y, coord.z);
        case 2:
            return uvec3(coord.x, coord.y + (1<<(width - 1)), coord.z);
        case 3:
            return uvec3(coord.x + (1<<(width - 1)), coord.y + (1<<(width - 1)), coord.z);
        case 4:
            return uvec3(coord.x, coord.y, coord.z + (1<<(width - 1)));
        case 5:
            return uvec3(coord.x + (1<<(width - 1)), coord.y, coord.z + (1<<(width - 1)));
        case 6:
            return uvec3(coord.x, coord.y + (1<<(width - 1)), coord.z + (1<<(width - 1)));
        case 7:
            return uvec3(coord.x + (1<<(width - 1)), coord.y + (1<<(width - 1)), coord.z + (1<<(width - 1)));
    }
}

ray_hit_result ray_hit_section_octree(ray now_ray, uint index) {
    uint dfs_order_stack[4][8];
    uvec3 octree_pos_stack[4];
    int dfs_index_stack[4];
    int now_stack_top = 0;
    uvec3 pos_offset = uvec3(section_octree[index].start_pos_x, section_octree[index].start_pos_y, section_octree[index].start_pos_z);
    ray_hit_result result;

    if (get_metadata_empty(section_octree[index].nodes[0].metadata)) {
        result.hit = false;
        return result;
    }
    octree_pos_stack[0] = uvec3(0, 0, 0);
    result = ray_hit_node(now_ray, pos_offset, 4);
    if (!result.hit) {
        result.hit = false;
        return result;
    }
    dfs_order_stack[0] = get_dfs_order(now_ray, octree_pos_stack[0], 4);
    dfs_index_stack[0] = 0;

    uint now_node_index;
    uvec3 now_node_pos;
    bool find;

    while (now_stack_top >= 0) {
        find = false;
        for (int i = dfs_index_stack[now_stack_top]; i < 8; ++i) {
            now_node_index = get_child_node_index(octree_pos_stack[now_stack_top], 4-now_stack_top, dfs_order_stack[now_stack_top][i]);
            if (get_metadata_empty(section_octree[index].nodes[now_node_index].metadata)) {
                continue;
            }
            now_node_pos = get_child_node_coord(octree_pos_stack[now_stack_top], 4-now_stack_top, dfs_order_stack[now_stack_top][i]);
            result = ray_hit_node(now_ray, now_node_pos+pos_offset, 3-now_stack_top);
            if (result.hit) {
                if (now_stack_top == 3) {
                    result.block_pos = now_node_pos+pos_offset;
                    result.block_index = now_node_pos;
                    return result;
                }
                dfs_index_stack[now_stack_top] = i + 1;
                ++now_stack_top;
                octree_pos_stack[now_stack_top] = now_node_pos;
                dfs_order_stack[now_stack_top] = get_dfs_order(now_ray, now_node_pos+pos_offset, 4-now_stack_top);
                dfs_index_stack[now_stack_top] = 0;
                find = true;
                break;
            }
        }
        if (!find) {
            --now_stack_top;
        }
    }
    result.hit = false;
    return result;
}

ray_hit_result ray_hit_center_octree(ray now_ray) {
    uint dfs_order_stack[4][8];
    uvec3 octree_pos_stack[4];
    int dfs_index_stack[4];
    int now_stack_top = 0;
    uvec3 pos_offset = uvec3(center_octree.start_pos_x, center_octree.start_pos_y, center_octree.start_pos_z);
    ray_hit_result result;

    if (get_metadata_empty(center_octree.nodes[0].metadata)) {
        result.hit = false;
        return result;
    }
    octree_pos_stack[0] = uvec3(0, 0, 0);
    result = ray_hit_node(now_ray, pos_offset, 8);
    if (!result.hit) {
        result.hit = false;
        return result;
    }
    dfs_order_stack[0] = get_dfs_order(now_ray, pos_offset, 8);
    dfs_index_stack[0] = 0;

    uint now_node_index;
    uvec3 now_node_pos;
    bool find;

    while (now_stack_top >= 0) {
        find = false;
        for (int i = dfs_index_stack[now_stack_top]; i < 8; ++i) {
            now_node_index = get_child_node_index(octree_pos_stack[now_stack_top], 4-now_stack_top, dfs_order_stack[now_stack_top][i]);
            if (get_metadata_empty(center_octree.nodes[now_node_index].metadata)) {
                continue;
            }
            now_node_pos = get_child_node_coord(octree_pos_stack[now_stack_top], 4-now_stack_top, dfs_order_stack[now_stack_top][i]);
            result = ray_hit_node(now_ray, (now_node_pos<<4)+pos_offset, 7-now_stack_top);
            if (result.hit) {
                if (now_stack_top == 3) {
                    result = ray_hit_section_octree(now_ray, group_map_data.section_map[now_node_pos.x][now_node_pos.y][now_node_pos.z]);
                    if (result.hit) {
                        result.section_pos = (now_node_pos<<4)+pos_offset;
                        result.section_index = now_node_pos;
                        return result;
                    } else {
                        continue;
                    }
                }
                dfs_index_stack[now_stack_top] = i + 1;
                ++now_stack_top;
                octree_pos_stack[now_stack_top] = now_node_pos;
                dfs_order_stack[now_stack_top] = get_dfs_order(now_ray, (now_node_pos<<4)+pos_offset, 8-now_stack_top);
                dfs_index_stack[now_stack_top] = 0;
                find = true;
                break;
            }
        }
        if (!find) {
            --now_stack_top;
        }
    }
    result.hit = false;
    return result;
}

uvec4 direct_light_source_pick(uvec3 section_pos) { //light pos/section index
    uvec4 result;
    uvec3 search_list[DIRECT_LIGHT_SAMPLE_NUM];
    uint search_list_count = 0;
    ivec3 now_section_pos = ivec3(section_pos);
    result.w = DIRECT_LIGHT_SAMPLE_FAILURE;
    for (int x = -1; x < ((DIRECT_LIGHT_SAMPLE_NUM-1)>>1); ++x) {
        for (int y = -1; y < ((DIRECT_LIGHT_SAMPLE_NUM-1)>>1); ++y) {
            for (int z = -1; z < ((DIRECT_LIGHT_SAMPLE_NUM-1)>>1); ++z) {
                if (now_section_pos.x + x < 16 && now_section_pos.x + x > -1 && now_section_pos.y + y < 16 && now_section_pos.y + y > -1 && now_section_pos.z + z < 16 && now_section_pos.z + z > -1) {
                    search_list[search_list_count] = uvec3(section_pos.x + x, section_pos.z + z, section_pos.z + z);
                    if (section_group[group_map_data.section_map[search_list[search_list_count].x][search_list[search_list_count].y][search_list[search_list_count].z]].light_source_num != 0) {
                        ++search_list_count;
                    }
                }
            }
        }
    }
    if (search_list_count == 0) {
        return result;
    }
    uint random_section_index = uint(floor(rand_01() * float(search_list_count)));
    result.w = group_map_data.section_map[search_list[random_section_index].x][search_list[random_section_index].y][search_list[random_section_index].z];
    uint random_light_index = uint(floor(rand_01() * float(section_group[result.w].light_source_num)));
    result.xyz = section_group[result.w].light_pos[random_light_index];
    return result;
}

direct_lighting_result direct_light_sample(ray_hit_result result) {
    direct_lighting_result lighting_result;
    lighting_result.success = false;
    uvec4 sample_result = direct_light_source_pick(result.section_pos);
    if (sample_result.w == DIRECT_LIGHT_SAMPLE_FAILURE) {
        return lighting_result;
    }
    lighting_result.sample_point = sample_result.xyz + vec3(rand_01(), rand_01(), rand_01());
    lighting_result.sample_ray.pos = result.hit_pos;
    lighting_result.sample_ray.dir = normalize(lighting_result.sample_point - result.hit_pos);
    ray_hit_result check_result = ray_hit_center_octree(lighting_result.sample_ray);
    if (check_result.block_pos != sample_result.xyz) {
        return lighting_result;
    }
    lighting_result.result_color = block_info_list[section_group[sample_result.w].blocks[sample_result.x][sample_result.y][sample_result.z].block_id].diffuse_color;
    lighting_result.result_color *= block_info_list[section_group[sample_result.w].blocks[sample_result.x][sample_result.y][sample_result.z].block_id].brightness;
    return lighting_result;
}

vec3 lambert(ray_hit_result result, ray out_ray) {
    return block_info_list[result.block_id].diffuse_color / PI;
}

float ggx_distribution(vec3 wh, vec3 normal, float roughness) {
    return pow(roughness, 4) / (PI * pow((pow(dot(normal, wh), 2) * (pow(roughness, 4) - 1) + 1), 2));
}

float schlick_ggx(ray in_ray, ray out_ray, vec3 normal, float roughness) {
    float k = pow(roughness + 1, 2) / 8;
    float gv = (-dot(normal, in_ray.dir)) / ((-dot(normal, in_ray.dir)) * (1 - k) + k);
    float gi = dot(normal, out_ray.dir) / (dot(normal, out_ray.dir) * (1 - k) + k);
    return gv * gi;
}

vec3 schlick_fresnel(vec3 dir, vec3 normal, vec3 f0) {
    return f0 + (1 - f0) * pow((1 - dot(dir, normal)), 5);
}

vec3 cook_torrance(ray_hit_result result, ray in_ray, ray out_ray) {
    vec3 wh = normalize(out_ray.dir - in_ray.dir);
    vec3 fr = schlick_fresnel(out_ray.dir, wh, block_info_list[result.block_id].reflect_color);
    float d = ggx_distribution(wh, result.plain_normal, block_info_list[result.block_id].roughness);
    float g = schlick_ggx(in_ray, out_ray, result.plain_normal, block_info_list[result.block_id].roughness);
    return fr * d * g / (4 * dot(result.plain_normal, in_ray.dir), dot(result.plain_normal, out_ray.dir));
}

vec3 brdf(ray_hit_result result, ray now_ray, ray new_ray) {
    return ((1 - block_info_list[result.block_id].k) * cook_torrance(result, now_ray, new_ray)) + (block_info_list[result.block_id].k * lambert(result, new_ray));
}

vec3 trace(ray now_ray) {
    ray_hit_result result;
    direct_lighting_result lighting_result;
    uint track_depth = 0;
    vec3 color = vec3(0, 0, 0);
    vec3 decay_factor = vec3(1, 1, 1);
    vec3 in_out_normal;
    ray new_ray;
    while (track_depth < MAX_TRACK_DEPTH) {
        result = ray_hit_center_octree(now_ray);
        if (result.hit) {
            result.block_id = section_group[group_map_data.section_map[result.section_index.x][result.section_index.y][result.section_index.z]].blocks[result.block_index.x][result.block_index.y][result.block_index.z].block_id;
            result.block_status = section_group[group_map_data.section_map[result.section_index.x][result.section_index.y][result.section_index.z]].blocks[result.block_index.x][result.block_index.y][result.block_index.z].status;
            if (block_info_list[result.block_id].brightness != 0) {
                return decay_factor * block_info_list[result.block_id].diffuse_color * block_info_list[result.block_id].brightness + color;
            }
            new_ray.pos = result.hit_pos;
            new_ray.dir = sample_half_sphere(result.plain_normal);
            //lighting_result = direct_light_sample(result);
            //if (lighting_result.success) {
            //    direct_light_color += decay_factor * (((1 - block_info_list[result.block_id].k) * cook_torrance(result, now_ray, lighting_result.sample_ray)) + (block_info_list[result.block_id].k * lambert(result, lighting_result.sample_ray))) * lighting_result.result_color / 2;
            //    decay_factor /= 2;
            //}
            decay_factor *=  brdf(result, now_ray, new_ray) * 2 * PI;
            now_ray = new_ray;
        } else {
            return color;
        }
        ++track_depth;
    }
    return color;
}

void main() {
    uint pixel_id = gl_GlobalInvocationID.y*now_camera.width_height.x + gl_GlobalInvocationID.x;
    uvec3 hash_result = pcg3d(uvec3(pixel_id, now_camera.seed, 114514));
    lcg_seed = (hash_result.x + hash_result.y + hash_result.z) & 0x7FFFFFFF;
    ivec2 pixel_xy = ivec2(gl_GlobalInvocationID.xy);
    vec3 color = trace(generate_ray());
    color.x = color.x > 1 ? 8 : color.x;
    color.y = color.y > 1 ? 8 : color.y;
    color.z = color.z > 1 ? 8 : color.z;
    if (now_camera.fixed_frame_count == 1) {
        imageStore(output_image, pixel_xy, vec4(color, 1.0f));
    } else {
        vec4 last_color = imageLoad(output_image, pixel_xy);
        imageStore(output_image, pixel_xy, vec4(color, 1.0f)/now_camera.fixed_frame_count + vec4(last_color.xyz, 1.0f)*(now_camera.fixed_frame_count-1)/float(now_camera.fixed_frame_count));
    }
}